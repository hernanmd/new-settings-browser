"
It represents a wrapper for an individual setting presenter to provide a more customized presentation in the settings browser. Subclasses may override accordingly to the ""type"" of value to set. For example, this class provides a label and a description presenters, but subclasses may also add a Number or Float presenter for the value to set (see `StSettingNumberPresenterItem` for details).

Subclasses may want to override `#value:` to abstract the way the wrapped presenter is configured, so instead of sending `#number:` or `#text:` clients can use directly `#value:`

The wrapped presenter is hold in `setterPresenter` instance variable.
"
Class {
	#name : 'StSettingPresenterItem',
	#superclass : 'SpPresenter',
	#instVars : [
		'labelPresenter',
		'setterPresenter',
		'descriptionPresenter',
		'model'
	],
	#category : 'NewSettingsBrowser-Widgets',
	#package : 'NewSettingsBrowser',
	#tag : 'Widgets'
}

{ #category : 'layout' }
StSettingPresenterItem >> defaultLayout [

	^ SpBoxLayout newLeftToRight
		vAlignCenter;
		add: labelPresenter width: 300;
		add: setterPresenter width: 200;
		add: descriptionPresenter;
		yourself
]

{ #category : 'accessing' }
StSettingPresenterItem >> descriptionPresenter [

	^ descriptionPresenter
]

{ #category : 'accessing' }
StSettingPresenterItem >> descriptionPresenter: anObject [

	descriptionPresenter := anObject
]

{ #category : 'initialization' }
StSettingPresenterItem >> initializePresenters [
	"Set a label and description presenters as baseline for every setting"

	labelPresenter := self newText 
		addStyle: 'descriptionStyle';
		text: self model label.
	descriptionPresenter := self newText 
		text: self model description;
		addStyle: 'descriptionStyle';
		yourself.

]

{ #category : 'accessing' }
StSettingPresenterItem >> labelPresenter [

	^ labelPresenter
]

{ #category : 'accessing' }
StSettingPresenterItem >> labelPresenter: anObject [

	labelPresenter := anObject
]

{ #category : 'accessing' }
StSettingPresenterItem >> model [

	^ model
]

{ #category : 'accessing - model' }
StSettingPresenterItem >> setModelBeforeInitialization: aModel [

	model := aModel
]

{ #category : 'accessing' }
StSettingPresenterItem >> setterPresenter [

	^ setterPresenter
]

{ #category : 'accessing' }
StSettingPresenterItem >> setterPresenter: anObject [

	setterPresenter := anObject
]

{ #category : 'accessing' }
StSettingPresenterItem >> value: anObject [ 
	"Set the receiver's value to anObject"

	self subclassResponsibility
]
